from aiogram import Router, types, Bot
from aiogram.filters import Command, CommandStart
from request import get_exchange_rate
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler


router = Router()
scheduler = AsyncIOScheduler()
user_thresholds = {}

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –∫—É—Ä—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç")],
        [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞")],
        [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)


class CurrencieState(StatesGroup):
    currency = State()
    threshold = State()


@router.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /rate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤.", reply_markup=keyboard)


@router.message(lambda message: message.text == "–í—ã–≤–µ—Å—Ç–∏ –∫—É—Ä—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç" or message.text == "/rate")
async def get_rate(message: types.Message):
    rates = get_exchange_rate()
    result = '–ö—É—Ä—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç:\n'
    selected_currencies = ["EUR", "GBP", "JPY", "RUB"]
    for currency in selected_currencies:
        result += f"{currency}: {round(rates.get(currency, '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'), 2)}\n"
    
    await message.answer(result)


@router.message(lambda message: message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞")
async def set_threshold_step1(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, EUR:")
    await state.set_state(CurrencieState.currency)


@router.message(CurrencieState.currency)
async def set_threshold_step2(message: types.Message, state: FSMContext):
    await state.update_data(currency=message.text.upper())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.set_state(CurrencieState.threshold)


@router.message(CurrencieState.threshold)
async def set_threshold_step3(message: types.Message, state: FSMContext):
    try:
        threshold = float(message.text)
        user_data = await state.get_data()
        currency = user_data["currency"]
        user_id = message.from_user.id

        if user_id not in user_thresholds:
            user_thresholds[user_id] = {}
        user_thresholds[user_id][currency] = threshold

        await message.answer(f"–ü–æ—Ä–æ–≥ –¥–ª—è {currency} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {threshold}.")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


async def check_thresholds(bot: Bot):
    rates = get_exchange_rate()
    for user_id, thresholds in user_thresholds.items():
        for currency, threshold in thresholds.items():
            current_rate = rates.get(currency)
            if current_rate and current_rate < threshold:
                await bot.send_message(user_id, f"‚ö†Ô∏è –ö—É—Ä—Å {currency} —É–ø–∞–ª –Ω–∏–∂–µ {threshold}: —Å–µ–π—á–∞—Å {round(current_rate, 2)}")


async def inline_button_handler():
    selected_currencies = ["EUR", "GBP", "JPY", "RUB"]
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=currency, callback_data=f"rate:{currency}")]
            for currency in selected_currencies
        ]
    )


@router.message(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É")
async def which_currencie(message: types.Message):
    keyboard_inline = await inline_button_handler()
    if keyboard_inline:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:", reply_markup=keyboard_inline)
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")


@router.callback_query(lambda call: call.data.startswith("rate:"))
async def get_currencie(callback_query: types.CallbackQuery):
    currency = callback_query.data.split(":")[1]
    rates = get_exchange_rate()
    rate = rates.get(currency, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞")
    await callback_query.message.edit_text(f"–ö—É—Ä—Å {currency}: {round(rate, 2)}")


@router.message(lambda message: message.text == "–ü–æ–º–æ—â—å" or message.text == "/help")
async def help(message: types.Message):
    help_text = (
        "üîπ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —É–¥–æ–±–Ω—ã–º.\n\n"
        "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        " - **/start** ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        " - **/help** ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n"
        " - **/rate** ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.\n"
        " - **/which** ‚Äî –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞.\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ! üöÄ"
    )
    await message.answer(help_text, parse_mode="Markdown")